
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { CalendarIcon } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { PaymentData } from "@/services/payment/types";

interface PaymentFormProps {
  leaseId: string;
  monthlyRent?: number;
  initialData?: PaymentData;
  onSubmit: (data: PaymentData) => Promise<void>;
  onCancel: () => void;
  isSubmitting?: boolean;
}

export default function PaymentForm({
  leaseId,
  monthlyRent = 0,
  initialData,
  onSubmit,
  onCancel,
  isSubmitting = false
}: PaymentFormProps) {
  const [amount, setAmount] = useState<number>(initialData?.amount || monthlyRent);
  const [paymentType, setPaymentType] = useState<string>(initialData?.paymentType || 'rent');
  const [paymentMethod, setPaymentMethod] = useState<string>(initialData?.paymentMethod || 'bank_transfer');
  const [status, setStatus] = useState<string>(initialData?.status || 'pending');
  const [paymentDate, setPaymentDate] = useState<Date | undefined>(
    initialData?.paymentDate ? new Date(initialData.paymentDate) : undefined
  );
  const [dueDate, setDueDate] = useState<Date | undefined>(
    initialData?.dueDate ? new Date(initialData.dueDate) : undefined
  );
  const [notes, setNotes] = useState<string>(initialData?.notes || '');
  const [transactionId, setTransactionId] = useState<string>(initialData?.transactionId || '');

  // Update the default amount when monthlyRent prop changes
  useEffect(() => {
    if (!initialData && monthlyRent > 0 && amount === 0) {
      setAmount(monthlyRent);
    }
  }, [monthlyRent, initialData]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Format dates as ISO strings
    const paymentDateStr = paymentDate ? format(paymentDate, 'yyyy-MM-dd') : null;
    const dueDateStr = dueDate ? format(dueDate, 'yyyy-MM-dd') : null;
    
    const paymentData: PaymentData = {
      leaseId,
      amount,
      paymentType: paymentType as any,
      paymentMethod,
      status: status as any,
      paymentDate: paymentDateStr,
      dueDate: dueDateStr,
      notes: notes || null,
      transactionId: transactionId || null,
      isAutoGenerated: initialData?.isAutoGenerated || false
    };
    
    // If we're editing an existing payment, include the ID
    if (initialData?.id) {
      paymentData.id = initialData.id;
    }
    
    await onSubmit(paymentData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="amount">Montant</Label>
          <Input
            id="amount"
            type="number"
            value={amount}
            onChange={(e) => setAmount(Number(e.target.value))}
            required
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="payment-type">Type de paiement</Label>
          <Select
            value={paymentType}
            onValueChange={setPaymentType}
          >
            <SelectTrigger id="payment-type">
              <SelectValue placeholder="Sélectionner un type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="rent">Loyer</SelectItem>
              <SelectItem value="deposit">Caution</SelectItem>
              <SelectItem value="deposit_return">Remboursement caution</SelectItem>
              <SelectItem value="agency_fee">Frais d'agence</SelectItem>
              <SelectItem value="other">Autre</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="payment-method">Méthode de paiement</Label>
          <Select
            value={paymentMethod}
            onValueChange={setPaymentMethod}
          >
            <SelectTrigger id="payment-method">
              <SelectValue placeholder="Sélectionner une méthode" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="cash">Espèces</SelectItem>
              <SelectItem value="bank_transfer">Virement bancaire</SelectItem>
              <SelectItem value="check">Chèque</SelectItem>
              <SelectItem value="credit_card">Carte de crédit</SelectItem>
              <SelectItem value="mobile_money">Mobile Money</SelectItem>
              <SelectItem value="other">Autre</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="status">Statut</Label>
          <Select
            value={status}
            onValueChange={setStatus}
          >
            <SelectTrigger id="status">
              <SelectValue placeholder="Sélectionner un statut" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="paid">Payé</SelectItem>
              <SelectItem value="pending">En attente</SelectItem>
              <SelectItem value="late">En retard</SelectItem>
              <SelectItem value="cancelled">Annulé</SelectItem>
              <SelectItem value="undefined">À définir</SelectItem>
              <SelectItem value="advanced">Payé en avance</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label>Date d'échéance</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                className={cn(
                  "w-full justify-start text-left font-normal",
                  !dueDate && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {dueDate ? format(dueDate, "PPP") : <span>Sélectionner une date</span>}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={dueDate}
                onSelect={setDueDate}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        </div>
        
        <div className="space-y-2">
          <Label>Date de paiement</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                className={cn(
                  "w-full justify-start text-left font-normal",
                  !paymentDate && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {paymentDate ? format(paymentDate, "PPP") : <span>Sélectionner une date</span>}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={paymentDate}
                onSelect={setPaymentDate}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        </div>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="transaction-id">ID de transaction (optionnel)</Label>
        <Input
          id="transaction-id"
          value={transactionId}
          onChange={(e) => setTransactionId(e.target.value)}
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="notes">Notes (optionnel)</Label>
        <Textarea
          id="notes"
          value={notes}
          onChange={(e) => setNotes(e.target.value)}
          rows={3}
        />
      </div>
      
      <div className="flex justify-end space-x-2 pt-2">
        <Button type="button" variant="outline" onClick={onCancel} disabled={isSubmitting}>
          Annuler
        </Button>
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? "Enregistrement..." : initialData ? "Mettre à jour" : "Ajouter"}
        </Button>
      </div>
    </form>
  );
}
