
import React, { useState } from 'react';
import { MoreHorizontal, Check, X, Calendar, FileEdit } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu";
import { TableCell, TableRow } from "@/components/ui/table";
import { getStatusIcon, getPaymentTypeBadge } from "../utils/paymentDisplayUtils";
import { formatCurrency } from "@/lib/utils";

interface PaymentRowProps {
  payment: {
    id?: string;
    leaseId: string;
    amount: number;
    paymentDate?: string | null;
    dueDate?: string | null;
    paymentMethod?: string;
    status?: string;
    paymentType?: string;
    isAutoGenerated?: boolean;
    notes?: string;
    createdAt?: string;
    effectiveStatus: "undefined" | "paid" | "pending" | "late" | "advanced";
  };
  showCheckbox: boolean;
  onViewPayment: (paymentId: string) => void;
  onEditPayment: (paymentId: string) => void;
  onMarkAsPaid: (paymentId: string) => void;
  onMarkAsUnpaid: (paymentId: string) => void;
  isSelected: boolean;
  onToggleSelect: (paymentId: string, selected: boolean) => void;
}

export default function PaymentRow({
  payment,
  showCheckbox,
  onViewPayment,
  onEditPayment,
  onMarkAsPaid,
  onMarkAsUnpaid,
  isSelected,
  onToggleSelect
}: PaymentRowProps) {
  const [isHovered, setIsHovered] = useState(false);
  
  const handleToggleSelect = (checked: boolean) => {
    if (payment.id) {
      onToggleSelect(payment.id, checked);
    }
  };
  
  const handleMarkAsPaid = () => {
    if (payment.id) {
      onMarkAsPaid(payment.id);
    }
  };
  
  const handleMarkAsUnpaid = () => {
    if (payment.id) {
      onMarkAsUnpaid(payment.id);
    }
  };
  
  const handleEditPayment = () => {
    if (payment.id) {
      onEditPayment(payment.id);
    }
  };
  
  const handleViewPayment = () => {
    if (payment.id) {
      onViewPayment(payment.id);
    }
  };
  
  return (
    <TableRow 
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      className={isSelected ? "bg-muted/50" : (isHovered ? "bg-muted/20" : "")}
    >
      {showCheckbox && (
        <TableCell className="w-10">
          <Checkbox 
            checked={isSelected} 
            onCheckedChange={handleToggleSelect}
          />
        </TableCell>
      )}
      <TableCell>
        {payment.dueDate ? new Date(payment.dueDate).toLocaleDateString() : "-"}
      </TableCell>
      <TableCell>
        {payment.paymentType ? getPaymentTypeBadge(payment.paymentType) : "-"}
      </TableCell>
      <TableCell className="font-medium">
        {formatCurrency(payment.amount)}
      </TableCell>
      <TableCell>
        <div className="flex items-center gap-1">
          {getStatusIcon(payment.effectiveStatus)}
          <span className="capitalize ml-1">{payment.effectiveStatus}</span>
        </div>
      </TableCell>
      <TableCell>
        {payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : "-"}
      </TableCell>
      <TableCell className="max-w-xs truncate">
        {payment.notes || "-"}
      </TableCell>
      <TableCell>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={handleViewPayment}>
              <Calendar className="mr-2 h-4 w-4" />
              <span>Voir détails</span>
            </DropdownMenuItem>
            <DropdownMenuItem onClick={handleEditPayment}>
              <FileEdit className="mr-2 h-4 w-4" />
              <span>Modifier</span>
            </DropdownMenuItem>
            {payment.effectiveStatus !== "paid" && (
              <DropdownMenuItem onClick={handleMarkAsPaid}>
                <Check className="mr-2 h-4 w-4" />
                <span>Marquer comme payé</span>
              </DropdownMenuItem>
            )}
            {payment.effectiveStatus === "paid" && (
              <DropdownMenuItem onClick={handleMarkAsUnpaid}>
                <X className="mr-2 h-4 w-4" />
                <span>Marquer comme non payé</span>
              </DropdownMenuItem>
            )}
          </DropdownMenuContent>
        </DropdownMenu>
      </TableCell>
    </TableRow>
  );
}
