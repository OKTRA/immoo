
import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Receipt, CheckCircle2, Clock, AlertTriangle } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { supabase } from "@/lib/supabase";
import { PaymentData } from "@/services/payment";
import { formatCurrency } from "@/lib/utils";
import { useToast } from "@/components/ui/use-toast";

export default function AgencyPaymentsPage() {
  const { agencyId } = useParams();
  const { toast } = useToast();
  const [payments, setPayments] = useState<PaymentData[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchAgencyPayments() {
      if (!agencyId) return;

      setLoading(true);
      try {
        // Récupérer tous les paiements liés aux baux des propriétés de cette agence
        const { data: leaseData, error: leaseError } = await supabase
          .from('leases')
          .select(`
            id,
            properties!inner(
              id,
              title,
              agency_id
            )
          `)
          .eq('properties.agency_id', agencyId);

        if (leaseError) throw leaseError;

        if (leaseData && leaseData.length > 0) {
          const leaseIds = leaseData.map(lease => lease.id);
          
          const { data: paymentsData, error: paymentsError } = await supabase
            .from('payments')
            .select(`
              id,
              lease_id,
              amount,
              payment_date,
              due_date,
              payment_method,
              status,
              transaction_id,
              notes,
              payment_type,
              is_auto_generated,
              processed_by,
              created_at
            `)
            .in('lease_id', leaseIds)
            .order('due_date', { ascending: false });

          if (paymentsError) throw paymentsError;

          // Transformer les données du format snake_case au format camelCase
          const transformedPayments = paymentsData.map(payment => ({
            id: payment.id,
            leaseId: payment.lease_id,
            amount: payment.amount,
            paymentDate: payment.payment_date,
            dueDate: payment.due_date,
            paymentMethod: payment.payment_method,
            status: payment.status,
            transactionId: payment.transaction_id,
            notes: payment.notes,
            paymentType: payment.payment_type || 'rent',
            isAutoGenerated: payment.is_auto_generated || false,
            processedBy: payment.processed_by,
            createdAt: payment.created_at
          }));

          setPayments(transformedPayments);
        }
      } catch (error: any) {
        console.error("Erreur lors de la récupération des paiements:", error);
        toast({
          title: "Erreur",
          description: `Impossible de récupérer les paiements: ${error.message}`,
          variant: "destructive"
        });
      } finally {
        setLoading(false);
      }
    }

    fetchAgencyPayments();
  }, [agencyId, toast]);

  // Fonction pour obtenir l'icône de statut
  const getStatusIcon = (status: string) => {
    switch (status) {
      case "paid":
        return <CheckCircle2 className="h-4 w-4 text-green-500" />;
      case "pending":
        return <Clock className="h-4 w-4 text-yellow-500" />;
      case "late":
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-400" />;
    }
  };

  // Fonction pour obtenir le badge du type de paiement
  const getPaymentTypeBadge = (type: string) => {
    switch (type) {
      case "deposit":
        return <Badge variant="secondary">Caution</Badge>;
      case "agency_fee":
        return <Badge variant="secondary">Frais d'agence</Badge>;
      case "rent":
        return <Badge variant="default">Loyer</Badge>;
      case "deposit_return":
        return <Badge variant="outline">Remboursement caution</Badge>;
      case "initial":
        return <Badge variant="secondary">Initial</Badge>;
      default:
        return <Badge variant="outline">Autre</Badge>;
    }
  };

  return (
    <div className="container mx-auto py-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold">Gestion des paiements</h1>
      </div>

      <div className="grid grid-cols-1 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <div>
              <CardTitle className="text-xl">Vue d'ensemble des paiements</CardTitle>
              <CardDescription>
                Gérez les paiements de toutes vos propriétés depuis un seul endroit
              </CardDescription>
            </div>
            <Receipt className="h-5 w-5 text-primary" />
          </CardHeader>
          <CardContent className="pt-6">
            <Tabs defaultValue="overview">
              <TabsList className="mb-4">
                <TabsTrigger value="overview">Aperçu</TabsTrigger>
                <TabsTrigger value="bulkManagement">Gestion en masse</TabsTrigger>
              </TabsList>
              
              <TabsContent value="overview">
                {loading ? (
                  <div className="flex justify-center items-center p-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                  </div>
                ) : payments.length === 0 ? (
                  <div className="flex flex-col items-center justify-center py-10 text-center">
                    <Receipt className="h-16 w-16 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-semibold mb-2">Aucun paiement récent</h3>
                    <p className="text-muted-foreground max-w-md">
                      Les paiements de toutes vos propriétés apparaîtront ici. Vous pouvez accéder aux paiements d'une propriété spécifique depuis sa page détaillée.
                    </p>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Échéance</TableHead>
                          <TableHead>Type</TableHead>
                          <TableHead>Montant</TableHead>
                          <TableHead>Statut</TableHead>
                          <TableHead>Date de paiement</TableHead>
                          <TableHead>Notes</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {payments.map((payment) => (
                          <TableRow key={payment.id} className="group hover:bg-muted/50">
                            <TableCell>
                              {payment.dueDate ? new Date(payment.dueDate).toLocaleDateString() : "N/A"}
                            </TableCell>
                            <TableCell>
                              {getPaymentTypeBadge(payment.paymentType)}
                            </TableCell>
                            <TableCell className="font-medium">
                              {formatCurrency(payment.amount, 'FCFA')}
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                {getStatusIcon(payment.status)}
                                <span className="capitalize">{payment.status}</span>
                              </div>
                            </TableCell>
                            <TableCell>
                              {payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : "—"}
                            </TableCell>
                            <TableCell className="max-w-[200px] truncate">
                              {payment.notes || "—"}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </TabsContent>
              
              <TabsContent value="bulkManagement">
                <div className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg">
                    <h3 className="font-medium mb-2 flex items-center">
                      <CheckCircle2 className="h-5 w-5 mr-2 text-green-500" />
                      Fonctionnalité de gestion en masse activée
                    </h3>
                    <p className="text-sm text-muted-foreground">
                      Vous pouvez désormais sélectionner plusieurs paiements dans les pages de bail et les mettre à jour en une seule opération. 
                      Cela est particulièrement utile pour mettre à jour les paiements au statut "indéfini".
                    </p>
                  </div>
                  
                  <div className="bg-blue-50 p-4 rounded-lg border border-blue-100">
                    <h3 className="font-medium mb-2 flex items-center text-blue-800">
                      <Clock className="h-5 w-5 mr-2 text-blue-600" />
                      Comment utiliser la mise à jour en masse
                    </h3>
                    <ol className="list-decimal pl-5 text-sm text-blue-700 space-y-1">
                      <li>Accédez à la page de gestion des paiements d'un bail</li>
                      <li>Sélectionnez les paiements à mettre à jour en cochant les cases</li>
                      <li>Utilisez le panneau "Mise à jour en masse" pour changer leur statut</li>
                      <li>Cliquez sur "Mettre à jour" pour appliquer les changements</li>
                    </ol>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
