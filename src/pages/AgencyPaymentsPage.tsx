import React, { useState } from "react";
import { useParams } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Receipt, 
  CheckCircle2, 
  Clock, 
  AlertTriangle,
  CreditCard,
  DollarSign,
  Calendar,
  Search,
  Filter,
  Download,
  TrendingUp,
  Eye,
  Edit,
  FileText,
  Building2,
  Users,
  Wallet,
  Target,
  Activity,
  ArrowUpDown,
  PieChart
} from "lucide-react";
import { supabase } from "@/lib/supabase";
import { PaymentData } from "@/services/payment";
import { formatCurrency } from "@/lib/utils";
import { toast } from "sonner";
import { useTranslation } from "@/hooks/useTranslation";

interface PaymentWithDetails extends PaymentData {
  propertyTitle?: string;
  tenantName?: string;
  leaseStartDate?: string;
}

export default function AgencyPaymentsPage() {
  const { agencyId } = useParams();
  const { t } = useTranslation();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [selectedType, setSelectedType] = useState('all');
  const [selectedPeriod, setSelectedPeriod] = useState('month');

  const { data: payments = [], isLoading, error } = useQuery({
    queryKey: ['agency-payments', agencyId, selectedPeriod],
    queryFn: async () => {
      if (!agencyId) return [];

      try {
        // Récupérer tous les paiements liés aux baux des propriétés de cette agence
          const { data: paymentsData, error: paymentsError } = await supabase
            .from('payments')
            .select(`
              id,
              lease_id,
              amount,
              payment_date,
              due_date,
              payment_method,
              status,
              transaction_id,
              notes,
              payment_type,
              is_auto_generated,
              processed_by,
            created_at,
            leases!inner(
              id,
              start_date,
              properties!inner(
                id,
                title,
                agency_id
              ),
              tenants(
                first_name,
                last_name,
                email
              )
            )
          `)
          .eq('leases.properties.agency_id', agencyId)
          .order('created_at', { ascending: false });

          if (paymentsError) throw paymentsError;

        // Transformer les données du format snake_case au format camelCase avec détails
        const transformedPayments: PaymentWithDetails[] = (paymentsData || []).map(payment => ({
            id: payment.id,
            leaseId: payment.lease_id,
            amount: payment.amount,
            paymentDate: payment.payment_date,
            dueDate: payment.due_date,
            paymentMethod: payment.payment_method,
            status: payment.status,
            transactionId: payment.transaction_id,
            notes: payment.notes,
            paymentType: payment.payment_type || 'rent',
            isAutoGenerated: payment.is_auto_generated || false,
            processedBy: payment.processed_by,
          createdAt: payment.created_at,
          propertyTitle: payment.leases?.properties?.title || t('agencyDashboard.pages.payments.unknownProperty'),
          tenantName: payment.leases?.tenants ? 
            `${payment.leases.tenants.first_name || ''} ${payment.leases.tenants.last_name || ''}`.trim() : 
            t('agencyDashboard.pages.payments.unknownTenant'),
          leaseStartDate: payment.leases?.start_date
        }));

        return transformedPayments;
      } catch (error: any) {
        console.error("Erreur lors de la récupération des paiements:", error);
        throw new Error(`${t('agencyDashboard.pages.payments.cannotRetrievePayments')}: ${error.message}`);
      }
    },
    enabled: !!agencyId,
    refetchOnWindowFocus: false,
  });

  if (!agencyId) {
    return (
      <div className="container mx-auto p-6">
        <Alert className="border-red-200 bg-red-50">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>{t('agencyDashboard.pages.payments.missingAgencyId')}</AlertDescription>
        </Alert>
      </div>
    );
  }

  // Filtrer les paiements
  const filteredPayments = payments.filter(payment => {
    const matchesSearch = 
      payment.propertyTitle?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      payment.tenantName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      payment.transactionId?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = selectedStatus === 'all' || payment.status === selectedStatus;
    const matchesType = selectedType === 'all' || payment.paymentType === selectedType;
    
    return matchesSearch && matchesStatus && matchesType;
  });

  // Calculer les statistiques
  const totalPayments = payments.reduce((sum, p) => sum + (p.amount || 0), 0);
  const paidPayments = payments.filter(p => p.status === 'paid').reduce((sum, p) => sum + (p.amount || 0), 0);
  const pendingPayments = payments.filter(p => p.status === 'pending').reduce((sum, p) => sum + (p.amount || 0), 0);
  const latePayments = payments.filter(p => p.status === 'late').reduce((sum, p) => sum + (p.amount || 0), 0);
  
  const paidPercentage = totalPayments > 0 ? (paidPayments / totalPayments) * 100 : 0;
  const pendingPercentage = totalPayments > 0 ? (pendingPayments / totalPayments) * 100 : 0;

  // Fonction pour obtenir l'icône de statut
  const getStatusIcon = (status: string) => {
    switch (status) {
      case "paid":
        return <CheckCircle2 className="h-4 w-4 text-green-500" />;
      case "pending":
        return <Clock className="h-4 w-4 text-yellow-500" />;
      case "late":
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-400" />;
    }
  };

  // Fonction pour obtenir le badge du type de paiement
  const getPaymentTypeBadge = (type: string) => {
    switch (type) {
      case "deposit":
        return <Badge className="bg-blue-100 text-blue-700 border-blue-200">💰 {t('agencyDashboard.pages.payments.deposit')}</Badge>;
      case "agency_fee":
        return <Badge className="bg-purple-100 text-purple-700 border-purple-200">🏢 {t('agencyDashboard.pages.payments.agencyFee')}</Badge>;
      case "rent":
        return <Badge className="bg-green-100 text-green-700 border-green-200">🏠 {t('agencyDashboard.pages.payments.rent')}</Badge>;
      case "deposit_return":
        return <Badge className="bg-orange-100 text-orange-700 border-orange-200">↩️ {t('agencyDashboard.pages.payments.depositReturn')}</Badge>;
      case "initial":
        return <Badge className="bg-indigo-100 text-indigo-700 border-indigo-200">🎯 {t('agencyDashboard.pages.payments.initial')}</Badge>;
      default:
        return <Badge variant="outline">{t('agencyDashboard.pages.payments.other')}</Badge>;
    }
  };

  if (isLoading) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center min-h-96">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-immoo-gold mx-auto mb-4"></div>
            <p className="text-muted-foreground">{t('agencyDashboard.pages.payments.loadingPayments')}</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
  return (
      <div className="container mx-auto p-6">
        <Alert className="border-red-200 bg-red-50">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            {t('agencyDashboard.pages.payments.loadError')}
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      {/* Header Premium */}
      <div className="flex justify-between items-start">
        <div className="space-y-2">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-gradient-to-br from-immoo-gold to-immoo-navy rounded-xl">
              <Receipt className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-immoo-navy to-immoo-gold bg-clip-text text-transparent">
                {t('agencyDashboard.pages.payments.title')}
              </h1>
              <p className="text-muted-foreground">
                {t('agencyDashboard.pages.payments.description')}
              </p>
            </div>
          </div>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" size="sm" className="hidden sm:flex">
            <PieChart className="h-4 w-4 mr-2" />
            {t('agencyDashboard.pages.payments.reports')}
          </Button>
          <Button variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            {t('agencyDashboard.pages.payments.export')}
          </Button>
        </div>
      </div>

      {/* Filtres Premium */}
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardContent className="p-6">
          <div className="flex flex-wrap gap-4 items-center">
            <div className="flex gap-2">
              {[
                { value: 'all', label: t('agencyDashboard.pages.payments.all'), icon: Receipt },
                { value: 'paid', label: t('agencyDashboard.pages.payments.paid'), icon: CheckCircle2 },
                { value: 'pending', label: t('agencyDashboard.pages.payments.pending'), icon: Clock },
                { value: 'late', label: t('agencyDashboard.pages.payments.late'), icon: AlertTriangle }
              ].map((status) => (
                <Button
                  key={status.value}
                  variant={selectedStatus === status.value ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedStatus(status.value)}
                  className={selectedStatus === status.value ? 'bg-gradient-to-r from-immoo-gold to-immoo-navy' : ''}
                >
                  <status.icon className="h-4 w-4 mr-2" />
                  {status.label}
                </Button>
              ))}
            </div>
            
            <select 
              value={selectedType} 
              onChange={(e) => setSelectedType(e.target.value)}
              className="px-3 py-2 border rounded-lg bg-white/80 backdrop-blur-sm"
            >
              <option value="all">{t('agencyDashboard.pages.payments.allTypes')}</option>
              <option value="rent">{t('agencyDashboard.pages.payments.rents')}</option>
              <option value="deposit">{t('agencyDashboard.pages.payments.deposits')}</option>
              <option value="agency_fee">{t('agencyDashboard.pages.payments.agencyFees')}</option>
              <option value="initial">{t('agencyDashboard.pages.payments.initialPayments')}</option>
            </select>

            <div className="flex-1 min-w-[200px]">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <input
                  type="text"
                  placeholder={t('agencyDashboard.pages.payments.searchPlaceholder')}
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border rounded-lg bg-white/80 backdrop-blur-sm"
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Cartes de résumé premium */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-green-700 flex items-center justify-between">
              <div className="flex items-center">
                <DollarSign className="h-4 w-4 mr-2" />
                {t('agencyDashboard.pages.payments.totalCollected')}
              </div>
              <div className="p-1 bg-green-100 rounded-full">
                <TrendingUp className="h-3 w-3 text-green-600" />
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-800 mb-1">
              {formatCurrency(totalPayments, "FCFA")}
            </div>
            <div className="flex items-center justify-between text-xs">
              <span className="text-green-600">{payments.length} {t('agencyDashboard.pages.payments.transactions')}</span>
              <Badge variant="secondary" className="text-xs bg-green-100 text-green-700">
                {t('agencyDashboard.pages.payments.total')}
              </Badge>
            </div>
            <Progress value={100} className="mt-2 h-2" />
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-blue-700 flex items-center justify-between">
              <div className="flex items-center">
                <CheckCircle2 className="h-4 w-4 mr-2" />
                {t('agencyDashboard.pages.payments.receivedPayments')}
              </div>
              <div className="p-1 bg-blue-100 rounded-full">
                <Wallet className="h-3 w-3 text-blue-600" />
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-800 mb-1">
              {formatCurrency(paidPayments, "FCFA")}
            </div>
            <div className="flex items-center justify-between text-xs">
              <span className="text-blue-600">{t('agencyDashboard.pages.payments.confirmed')}</span>
              <Badge variant="secondary" className="text-xs bg-blue-100 text-blue-700">
                {paidPercentage.toFixed(0)}%
              </Badge>
            </div>
            <Progress value={paidPercentage} className="mt-2 h-2" />
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-50 to-amber-50 border-orange-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-orange-700 flex items-center justify-between">
              <div className="flex items-center">
                <Clock className="h-4 w-4 mr-2" />
                {t('agencyDashboard.pages.payments.pending')}
              </div>
              <div className="p-1 bg-orange-100 rounded-full">
                <Activity className="h-3 w-3 text-orange-600" />
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-800 mb-1">
              {formatCurrency(pendingPayments, "FCFA")}
            </div>
            <div className="flex items-center justify-between text-xs">
              <span className="text-orange-600">{t('agencyDashboard.pages.payments.toProcess')}</span>
              <Badge variant="secondary" className="text-xs bg-orange-100 text-orange-700">
                {pendingPercentage.toFixed(0)}%
              </Badge>
            </div>
            <Progress value={pendingPercentage} className="mt-2 h-2" />
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-red-50 to-pink-50 border-red-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-red-700 flex items-center justify-between">
              <div className="flex items-center">
                <AlertTriangle className="h-4 w-4 mr-2" />
                {t('agencyDashboard.pages.payments.late')}
              </div>
              <div className="p-1 bg-red-100 rounded-full">
                <Target className="h-3 w-3 text-red-600" />
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-800 mb-1">
              {formatCurrency(latePayments, "FCFA")}
            </div>
            <div className="flex items-center justify-between text-xs">
              <span className="text-red-600">{t('agencyDashboard.pages.payments.urgent')}</span>
              <Badge variant="secondary" className="text-xs bg-red-100 text-red-700">
                {t('agencyDashboard.pages.payments.actionRequired')}
              </Badge>
            </div>
            <Progress value={totalPayments > 0 ? (latePayments / totalPayments) * 100 : 0} className="mt-2 h-2" />
          </CardContent>
        </Card>
      </div>

      {/* Onglets détaillés */}
      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList className="bg-white/80 backdrop-blur-sm border shadow-lg">
          <TabsTrigger value="overview" className="flex items-center gap-2">
            <Receipt className="h-4 w-4" />
            {t('agencyDashboard.pages.payments.paymentHistory')}
          </TabsTrigger>
          <TabsTrigger value="management" className="flex items-center gap-2">
            <CreditCard className="h-4 w-4" />
            {t('agencyDashboard.pages.payments.bulkManagement')}
          </TabsTrigger>
              </TabsList>
              
        <TabsContent value="overview" className="space-y-4">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader className="bg-gradient-to-r from-immoo-navy/5 to-immoo-gold/5">
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <FileText className="h-5 w-5 text-immoo-navy" />
                  {t('agencyDashboard.pages.payments.paymentHistory')}
                </div>
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <ArrowUpDown className="h-4 w-4" />
                  {filteredPayments.length} {t('agencyDashboard.pages.payments.results')}
                  </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              {filteredPayments.length === 0 ? (
                <div className="text-center py-12">
                  <Receipt className="h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50" />
                  <p className="text-lg font-medium text-muted-foreground mb-2">
                    {searchTerm || selectedStatus !== 'all' || selectedType !== 'all'
                      ? t('agencyDashboard.pages.payments.noPaymentsFound')
                      : t('agencyDashboard.pages.payments.noPaymentsRegistered')
                    }
                  </p>
                  <p className="text-sm text-muted-foreground">
                    {searchTerm || selectedStatus !== 'all' || selectedType !== 'all'
                      ? t('agencyDashboard.pages.payments.tryModifyingFilters')
                      : t('agencyDashboard.pages.payments.paymentsWillAppearHere')
                    }
                    </p>
                  </div>
                ) : (
                <div className="divide-y divide-gray-100">
                  {filteredPayments.map((payment) => (
                    <div 
                      key={payment.id} 
                      className="p-6 hover:bg-gradient-to-r hover:from-immoo-pearl/30 hover:to-immoo-gold/10 transition-all duration-200 group"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <div className={`p-3 rounded-xl shadow-sm ${
                            payment.status === 'paid' 
                              ? 'bg-gradient-to-br from-green-100 to-emerald-100 text-green-700' 
                              : payment.status === 'pending'
                              ? 'bg-gradient-to-br from-orange-100 to-amber-100 text-orange-700'
                              : 'bg-gradient-to-br from-red-100 to-pink-100 text-red-700'
                          }`}>
                            {getStatusIcon(payment.status)}
                          </div>
                          <div className="space-y-1">
                            <div className="flex items-center gap-3">
                              <span className="font-semibold text-gray-900">
                              {getPaymentTypeBadge(payment.paymentType)}
                              </span>
                              <Badge 
                                variant={payment.status === 'paid' ? 'default' : 'secondary'} 
                                className={`text-xs ${
                                  payment.status === 'paid' 
                                    ? 'bg-green-100 text-green-700 border-green-200' 
                                    : payment.status === 'pending'
                                    ? 'bg-orange-100 text-orange-700 border-orange-200'
                                    : 'bg-red-100 text-red-700 border-red-200'
                                }`}
                              >
                                {payment.status === 'paid' ? `✓ ${t('agencyDashboard.pages.payments.paid')}` : 
                                 payment.status === 'pending' ? `⏳ ${t('agencyDashboard.pages.payments.pending')}` : `⚠️ ${t('agencyDashboard.pages.payments.late')}`}
                              </Badge>
                            </div>
                            <div className="flex items-center gap-4 text-sm text-muted-foreground">
                              <div className="flex items-center gap-1">
                                <Building2 className="h-3 w-3" />
                                {payment.propertyTitle}
                              </div>
                              <div className="flex items-center gap-1">
                                <Users className="h-3 w-3" />
                                {payment.tenantName}
                              </div>
                              <div className="flex items-center gap-1">
                                <Calendar className="h-3 w-3" />
                                {t('agencyDashboard.pages.payments.dueDate')}: {payment.dueDate ? new Date(payment.dueDate).toLocaleDateString('fr-FR') : 'N/A'}
                              </div>
                              {payment.transactionId && (
                                <div className="flex items-center gap-1">
                                  <CreditCard className="h-3 w-3" />
                                  ID: {payment.transactionId}
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                        <div className="text-right space-y-1">
                          <div className="text-2xl font-bold text-green-600">
                            {formatCurrency(payment.amount, "FCFA")}
                          </div>
                          {payment.paymentDate && (
                            <div className="text-xs text-green-600 flex items-center gap-1">
                              <CheckCircle2 className="h-3 w-3" />
                              {t('agencyDashboard.pages.payments.paidOn')} {new Date(payment.paymentDate).toLocaleDateString('fr-FR')}
                            </div>
                          )}
                          {payment.paymentMethod && (
                            <div className="text-xs text-muted-foreground">
                              {t('agencyDashboard.pages.payments.method')}: {payment.paymentMethod}
                            </div>
                          )}
                          <div className="flex gap-1 mt-2">
                            <Button
                              size="sm"
                              variant="ghost"
                              className="hover:bg-immoo-navy hover:text-white"
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="hover:bg-immoo-gold hover:text-white"
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  </div>
                )}
            </CardContent>
          </Card>
              </TabsContent>
              
        <TabsContent value="management">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader className="bg-gradient-to-r from-immoo-navy/5 to-immoo-gold/5">
              <CardTitle className="flex items-center gap-2">
                <CreditCard className="h-5 w-5 text-immoo-navy" />
                {t('agencyDashboard.pages.payments.bulkPaymentManagement')}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="text-center py-12">
                <CreditCard className="h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50" />
                <p className="text-lg font-medium text-muted-foreground mb-2">{t('agencyDashboard.pages.payments.bulkManagement')}</p>
                    <p className="text-sm text-muted-foreground">
                  {t('agencyDashboard.pages.payments.bulkManagementDescription')}
                    </p>
                  </div>
            </CardContent>
          </Card>
              </TabsContent>
            </Tabs>
    </div>
  );
}
